import telebot
from telebot import types
import g4f
import wikipediaapi
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from googleapiclient.discovery import build
import requests
import json

with open('config.json') as f:
    config = json.load(f)
# # –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏ Api

token = config['token_telegram']
client_id =config['client_id_spotify']
client_secret = config['client_secret_spotify']
api_key_yotube = config['api_key_yotube']
api_key_weather = config['api_key_weather']
wiki_key_project = config['Wiki_project']
timeout_seconds=15
video =[] # –¥–ª—è —é—Ç—é–±
audio = [] # –¥–ª—è spotify
user_query=[] # –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
button_name = ['Ask ChatGPT','Find on YouTube','Find artist on Spotify','Weather','Currency','Find on Wikipedia']

HELP = '''
–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
* /help - print help
* /q, /gpt- question to GPT
* /y, /youtube - question to Youtube
* /s - find in spotify
* /w, /w_ru, /–≤–∏–∫–∏, /w_en, /wiki - question to Wikipedia 
* /weather, /–ø–æ–≥–æ–¥–∞ - question Weather
* /cur, /–≤–∞–ª—é—Ç–∞ - Currency
'''
my_commands=['/help','/q','/y','/youtube','/w','/w_en','/w_ru','/wiki','/–≤–∏–∫–∏',
             '/weather','/cur','/curr','/–ø–æ–≥–æ–¥–∞','/–≤–∞–ª—é—Ç–∞','/s','/help','/–≤–∞–ª—é—Ç–∞','/gpt']  # –î–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ –±–µ–∑ /

bot=telebot.TeleBot(token)

#====================== Weather =================
def my_weather (prompt):
    base_url = f'https://api.openweathermap.org/data/2.5/weather?q={prompt}&appid={api_key_weather}'
    response = requests.get(base_url, timeout=timeout_seconds).json()
    my_temperature = response['main']['temp'] - 273.15
    my_temp_feels_like = response['main']['feels_like'] - 273.15
    my_weather = response['weather'][0]['main']
    my_wind = response['wind']['speed']
    my_humidity = response['main']['humidity']
    my_description = response['weather'][0]['description']
    answer = f'Temperature on {prompt} is : {my_temperature:.2f}  ‚ùÑÔ∏è \n '
    answer += f'Temperature on {prompt} feels like : {my_temp_feels_like:.2f} ‚ùÑÔ∏è \n'
    answer += f'Weather on {prompt} {my_weather} - {my_description} ‚òÅ \n'
    answer +=f'Wind on {prompt} {my_wind} ms üí® \n'
    answer +=f'Humidity on {prompt} {my_humidity} % üå¢ \n'
    return answer
#======================== Currency ===============================
def my_currency():
    url = "https://www.cbr-xml-daily.ru/daily_json.js"
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π timeout
    response = requests.get(url, timeout=timeout_seconds)
    if response.status_code == 200:
        with open("daily_json.js", "wb") as f:
            f.write(response.content)
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
    with open("daily_json.js", "rb") as f:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-–¥–∞–Ω–Ω—ã–µ
        data = json.loads(f.read().decode("utf-8"))
             #–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è data —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ JSON
        answer = '$ ' + f"{data['Valute']['USD']['Value']:.2f}" + ' rub' + '\n'
        answer += '‚Ç¨ ' + f"{data['Valute']['EUR']['Value']:.2f}" + ' rub' + '\n'
        answer += '‚Ç¥ ' + f"{data['Valute']['UAH']['Value']:.2f}" + ' rub' + '\n'
        return answer
    #===================== –í–∏–∫–∏–ø–µ–¥–∏—è ========
def my_wiki(my_command, prompt):
    if my_command in ('/w_en', '/w', '/wiki'):
        wiki_wiki = wiki_wiki = wikipediaapi.Wikipedia(f'{wiki_key_project}', 'en')
    else:
        wiki_wiki = wiki_wiki = wikipediaapi.Wikipedia(f'{wiki_key_project}','ru')  # RU Wiki
    page_py = wiki_wiki.page(prompt)
    if page_py.exists():
        answer = page_py.title + '\n' + page_py.text[:1000] + '\n' + page_py.fullurl
        return answer
    else:
        return f' –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑'
 # =========================Spotify =================
def my_spotify(prompt):
    # print(prompt)
    audio.clear()
    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=client_id,
                                                                   client_secret=client_secret))
    # –ò—â–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    results = sp.search(q=prompt, type='artist', limit=1)
    if results:
        answer = results['artists']['items'][0]['external_urls']['spotify']  # URL of spotify
        results = sp.search(q=prompt, limit=3)  #Top 3

        if results:
            for track in results['tracks']['items']:
                # answer = answer + '\n' + track['name'] + '\n' + track['external_urls']['spotify']
                audio.append(track['name'] + '\n' + track['external_urls']['spotify'])
        return answer
    else:
        return f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {prompt} –Ω–µ –Ω–∞–π–¥–µ–Ω'
#=================== Youtube==============
def my_youtube(prompt):
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Youtube Api
    youtube = build('youtube', 'v3', developerKey=api_key_yotube)
    search_query = prompt
    request = youtube.search().list(
        q=search_query,
        type='video',
        part='id,snippet',
        maxResults=5
    )
    response = request.execute()
    video.clear() # –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
    for item in response['items']:
        video_id = item['id']['videoId']
        video_url = f'https://www.youtube.com/watch?v={video_id}'
        video.append(video_url)
    return video
# ================ GPT =====
def my_gpt(prompt):
    try:
        response = g4f.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],  # —Ç–∞–∫–æ–π —à–∞–±–ª–æ–Ω –ø–µ—Ä–µ–¥–∞—á–∏
            stream=True,
        )
        answer = ''
        for element in response:
            # print(element, flush=True, end='')
            answer = answer + element
        return answer
    except requests.Timeout:
        return f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ (timeout: {timeout_seconds} —Å–µ–∫—É–Ω–¥)."
    except requests.RequestException as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}"
def my_help():
    return HELP

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton(button_name[0])
    btn2 = types.KeyboardButton(button_name[1])
    btn3 = types.KeyboardButton(button_name[2])
    btn4 = types.KeyboardButton(button_name[3])
    btn5 = types.KeyboardButton(button_name[4])
    btn6 = types.KeyboardButton(button_name[5])

    markup.row(btn1, btn2, btn3)
    markup.row(btn4, btn5, btn6)
    bot.register_next_step_handler(message, on_click)
    bot.send_message(message.chat.id, f'Hi, {message.from_user.first_name} üëã', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def on_click(message):
    try:
        command=''    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prompt = ''  # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º –µ—ë ==============
        if message.text[0]== '/':
            command = message.text.split()[0].lower()  # –ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–±—Ä–∞–Ω–∞
            if command in my_commands:
                if len(message.text.split()) > 1:  # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª–µ–µ 1 –≤—ã–¥–µ–ª—è–µ–º —á—Ç–æ –∏—Å–∫–∞—Ç—å, —Ç.–∫ –¥–ª—è –≤–∞–ª—é—Ç—ã –Ω–µ—Ç –ø–æ–∏—Å–∫–∞
                    prompt = message.text.split(maxsplit=1)[1]  # –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
                    user_query.append(prompt) # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫
            else:
                bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help')
        else:
            if message.text not in button_name:
                user_query.append(message.text)  # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.text == '/help':
            bot.send_message(message.chat.id, my_help())
        if message.text == 'Ask ChatGPT' or command in ('/q', '/gpt'):
            bot.send_message(message.chat.id, my_gpt(user_query[-1]))
        elif message.text == 'Find on YouTube' or command in ('/y','/youtube'):
            my_youtube(user_query[-1])  # –î–ª—è –≤—ã–≤–æ–¥–∞ –¢–æ–ø 5 –¥–µ–ª–∞–µ–º —Ü–∏–∫–ª
            for item in video:
                bot.send_message(message.chat.id, item)
        elif message.text =='Weather' or command in ['/weather','/–ø–æ–≥–æ–¥–∞']:
            bot.send_message(message.chat.id, my_weather(user_query[-1]))
        elif message.text == 'Currency' or command in ['/cur','/–≤–∞–ª—é—Ç–∞']:
            bot.send_message(message.chat.id, my_currency())
        elif message.text == 'Find on Wikipedia' or command in command in ['/w_ru','/w_en','/w','/wiki']:
            bot.send_message(message.chat.id, my_wiki(command, user_query[-1]))
        elif message.text == 'Find artist on Spotify' or command in ['/s']:
            bot.send_message(message.chat.id, my_spotify(user_query[-1]))
            bot.send_message(message.chat.id, '–¢–æ–ø-3')
            for track in audio:
                bot.send_message(message.chat.id, track)
    except requests.Timeout:
        bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ (timeout: {timeout_seconds} —Å–µ–∫—É–Ω–¥).")
    except requests.RequestException as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def main():
    try:
        bot.polling(none_stop=True)
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == '__main__':
    main()